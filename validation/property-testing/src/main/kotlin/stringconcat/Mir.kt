/*
 * This source file was generated by the Gradle 'init' task
 */
package stringconcat

import arrow.core.Either
import arrow.core.left
import arrow.core.right

sealed class ValidationError {
    object InvalidLength : ValidationError()
    object InvalidCharacters : ValidationError()
    object InvalidChecksum : ValidationError()
    object InvalidBin : ValidationError()
}

fun validateMirCardNumber(cardNumber: String): Either<ValidationError, Unit> {

    if (cardNumber.length !in 16..19) {
        return ValidationError.InvalidLength.left()
    }

    if (!cardNumber.all { it.isDigit() }) {
        return ValidationError.InvalidCharacters.left()
    }

    val bin = cardNumber.take(4).toInt()
    if (bin !in 2200..2204) {
        return ValidationError.InvalidBin.left()
    }

    if (!cardNumber.luhnAlgorithm()) {
        return ValidationError.InvalidChecksum.left()
    }

    return Unit.right()
}

fun String.luhnAlgorithm() = reversed()
    .map(Character::getNumericValue)
    .mapIndexed { index, digit ->
        when {
            index % 2 == 0 -> digit
            digit < 5 -> digit * 2
            else -> digit * 2 - 9
        }
    }.sum() % 10 == 0